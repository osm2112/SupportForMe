CREATE TABLE DELETE_MEMBER
  (
    USER_ID        VARCHAR2(50 BYTE),
    PASSWORD       VARCHAR2(50 BYTE),
    NAME           VARCHAR2(50 BYTE),
    ADDRESS        VARCHAR2(1000 BYTE),
    PHONE_NUM      VARCHAR2(100 BYTE),
    EMAIL          VARCHAR2(1000 BYTE),
    INTRODUCTION   VARCHAR2(1000 BYTE),
    POSTCODE       VARCHAR2(50 BYTE),
    ADDR_DETAIL    VARCHAR2(1000 BYTE),
    WITHDRAWA_DATE VARCHAR2(50 BYTE) DEFAULT sysdate,
    IP_ADDRESS     VARCHAR2(100 BYTE)
  )
  TABLESPACE ETC ;
CREATE TABLE COMMON_CODE
  (
    CODE_GROUP VARCHAR2(50 BYTE),
    CODE       VARCHAR2(50 BYTE),
    CODE_NAME  VARCHAR2(1000 BYTE)
  )
  TABLESPACE ETC ;
CREATE TABLE MEMBER
  (
    USER_ID      VARCHAR2(50 BYTE) NOT NULL ENABLE,
    PASSWORD     VARCHAR2(50 BYTE),
    NAME         VARCHAR2(50 BYTE),
    ADDRESS      VARCHAR2(1000 BYTE),
    PHONE_NUM    VARCHAR2(100 BYTE),
    EMAIL        VARCHAR2(1000 BYTE),
    INTRODUCTION VARCHAR2(1000 BYTE),
    POSTCODE     VARCHAR2(50 BYTE),
    ADDR_DETAIL  VARCHAR2(1000 BYTE),
    CONSTRAINT PK_MEMBER PRIMARY KEY (USER_ID)
  )
  TABLESPACE USERS ;
CREATE OR REPLACE TRIGGER DELETE_MEMBER_TRIGGER before
  UPDATE ON member FOR EACH row BEGIN IF updating THEN :NEW.password := NULL;
  INSERT
  INTO delete_member
    (
      user_id,
      password,
      name,
      address,
      phone_num,
      email,
      introduction,
      postcode,
      addr_detail,
      ip_address
    )
    VALUES
    (
      :old.user_id,
      :old.password,
      :old.name,
      :old.address,
      :old.phone_num,
      :old.email,
      :old.introduction,
      :old.postcode,
      :old.addr_detail,
      SYS_CONTEXT('userenv', 'ip_address')
    );
END IF;
END;
CREATE TABLE PROJECT
  (
    PROJECT_NO         VARCHAR2(50 BYTE) NOT NULL ENABLE,
    PROJECT_NAME       VARCHAR2(1000 BYTE),
    IMAGE              VARCHAR2(1000 BYTE),
    TARGET_AMOUNT      VARCHAR2(4000 BYTE),
    PROJECT_DEADLINE   VARCHAR2(50 BYTE),
    INTRODUCTION_VIDEO VARCHAR2(4000 BYTE),
    STORY CLOB,
    DEPOSIT_ACCOUNT    VARCHAR2(50 BYTE),
    BANK_CODE          VARCHAR2(50 BYTE),
    PROGRESS           VARCHAR2(50 BYTE),
    USER_ID            VARCHAR2(50 BYTE),
    INTRODUCTION_IMAGE VARCHAR2(4000 BYTE),
    SUPPORT_PICK_YN    VARCHAR2(50 BYTE),
    DELIVERY_DATE      VARCHAR2(50 BYTE),
    CATEGORY_CODE      VARCHAR2(50 BYTE),
    CONSTRAINT PK_POJECT PRIMARY KEY (PROJECT_NO),
    CONSTRAINT FK_PROJECT FOREIGN KEY (USER_ID) REFERENCES MEMBER (USER_ID) ENABLE
  )
  TABLESPACE PROJECT;
CREATE TABLE INVEST
  (
    INVEST_NO         VARCHAR2(50 BYTE) NOT NULL ENABLE,
    INVESTMENT_AMOUNT VARCHAR2(4000 BYTE),
    PAY_TYPE          VARCHAR2(50 BYTE),
    PRESENT_NO        VARCHAR2(50 BYTE),
    USER_ID           VARCHAR2(50 BYTE),
    PROJECT_NO        VARCHAR2(50 BYTE) NOT NULL ENABLE,
    PAYMENT_STATE     VARCHAR2(50 BYTE),
    CONSTRAINT PK_INVEST PRIMARY KEY (INVEST_NO),
    CONSTRAINT FK_INVEST FOREIGN KEY (PROJECT_NO) REFERENCES PROJECT (PROJECT_NO) ENABLE,
    CONSTRAINT FK_INVEST2 FOREIGN KEY (USER_ID) REFERENCES MEMBER (USER_ID) ENABLE
  )
  TABLESPACE INVEST ;
CREATE TABLE ACCOUNT_PAY
  (
    ACCOUNT_NO           VARCHAR2(50 BYTE) NOT NULL ENABLE,
    BANK_CODE            VARCHAR2(50 BYTE),
    ACCOUNT_HOLDER       VARCHAR2(50 BYTE),
    ACCOUNT_TYPE         VARCHAR2(50 BYTE),
    ACCOUNT_HOLDER_BIRTH VARCHAR2(50 BYTE),
    ACCOUNT              VARCHAR2(50 BYTE),
    INVEST_NO            VARCHAR2(50 BYTE) NOT NULL ENABLE,
    CONSTRAINT PK_ACCOUNT_PAY PRIMARY KEY (ACCOUNT_NO, INVEST_NO),
    CONSTRAINT FK_ACCOUNT_PAY FOREIGN KEY (INVEST_NO) REFERENCES INVEST (INVEST_NO) ENABLE
  )
  TABLESPACE INVEST ;
CREATE TABLE COMMENTS
  (
    COMMENT_NO      VARCHAR2(50 BYTE) NOT NULL ENABLE,
    TOP_COMMENT_NO  VARCHAR2(50 BYTE),
    COMMENT_CONTENT VARCHAR2(1000 BYTE),
    COMMENT_DATE    VARCHAR2(50 BYTE),
    PROJECT_NO      VARCHAR2(50 BYTE),
    USER_ID         VARCHAR2(50 BYTE),
    CONSTRAINT PK_COMMENT PRIMARY KEY (COMMENT_NO),
    CONSTRAINT FK_COMMENT FOREIGN KEY (USER_ID) REFERENCES MEMBER (USER_ID) ENABLE,
    CONSTRAINT FK_COMMENT_2 FOREIGN KEY (PROJECT_NO) REFERENCES PROJECT (PROJECT_NO) ENABLE,
    CONSTRAINT FK_COMMENT_3 FOREIGN KEY (TOP_COMMENT_NO) REFERENCES COMMENTS (COMMENT_NO) ENABLE
  )
  TABLESPACE ETC ;
CREATE TABLE CREDIT_INFO
  (
    PAY_NO          VARCHAR2(50 BYTE) NOT NULL ENABLE,
    USER_ID         VARCHAR2(50 BYTE) NOT NULL ENABLE,
    CARD_NUM        VARCHAR2(100 BYTE),
    EXPIRATION_DATE VARCHAR2(50 BYTE),
    CARDPASSWORD    VARCHAR2(50 BYTE),
    PAY_PASSWORD    VARCHAR2(50 BYTE),
    CONSTRAINT PK_CREDIT_INFO PRIMARY KEY (PAY_NO, USER_ID),
    CONSTRAINT FK_CREDIT_INFO FOREIGN KEY (USER_ID) REFERENCES MEMBER (USER_ID) ENABLE
  )
  TABLESPACE USERS ;
CREATE TABLE HASHTAG
  (
    HASHTAG_NO   VARCHAR2(50 BYTE) NOT NULL ENABLE,
    HASHTAG_NAME VARCHAR2(1000 BYTE),
    PROJECT_NO   VARCHAR2(50 BYTE),
    CONSTRAINT PK_HASHTAG PRIMARY KEY (HASHTAG_NO),
    CONSTRAINT FK_HASHTAG FOREIGN KEY (PROJECT_NO) REFERENCES PROJECT (PROJECT_NO) ENABLE
  )
  TABLESPACE ETC ;
CREATE TABLE CARD_PAY
  (
    CARD_NO   VARCHAR2(50 BYTE) NOT NULL ENABLE,
    INVEST_NO VARCHAR2(50 BYTE) NOT NULL ENABLE,
    PAY_NO    VARCHAR2(50 BYTE),
    USER_ID   VARCHAR2(50 BYTE),
    CONSTRAINT PK_CARD_PAY PRIMARY KEY (CARD_NO, INVEST_NO),
    CONSTRAINT FK_CARD_PAY FOREIGN KEY (PAY_NO, USER_ID) REFERENCES CREDIT_INFO (PAY_NO, USER_ID) ENABLE,
    CONSTRAINT FK_CARD_PAY_2 FOREIGN KEY (INVEST_NO) REFERENCES INVEST (INVEST_NO) ENABLE
  )
  TABLESPACE INVEST ;
CREATE TABLE PRESENT
  (
    PRESENT_NO    VARCHAR2(50 BYTE) NOT NULL ENABLE,
    PRESENT_PRICE VARCHAR2(4000 BYTE),
    PRESENT_NAME  VARCHAR2(1000 BYTE),
    PROJECT_NO    VARCHAR2(50 BYTE),
    CONSTRAINT PK_PRESENT PRIMARY KEY (PRESENT_NO),
    CONSTRAINT FK_PRESENT FOREIGN KEY (PROJECT_NO) REFERENCES PROJECT (PROJECT_NO) ENABLE
  )
  TABLESPACE PROJECT ;